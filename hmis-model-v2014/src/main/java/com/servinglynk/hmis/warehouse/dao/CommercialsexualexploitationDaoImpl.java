package com.servinglynk.hmis.warehouse.dao;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.servinglynk.hmis.warehouse.domain.ExportDomain;
import com.servinglynk.hmis.warehouse.domain.Sources.Source.Export;
import com.servinglynk.hmis.warehouse.domain.Sources.Source.Export.CommercialSexualExploitation;
import com.servinglynk.hmis.warehouse.enums.CommercialsexualexploitationAskedorforcedtoexchangeforsexEnum;
import com.servinglynk.hmis.warehouse.enums.CommercialsexualexploitationCountofexchangeforsexEnum;
import com.servinglynk.hmis.warehouse.enums.CommercialsexualexploitationExchangeforsexpastthreemonthsEnum;
import com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation;
import com.servinglynk.hmis.warehouse.util.BasicDataGenerator;

public class CommercialsexualexploitationDaoImpl  extends ParentDaoImpl  implements CommercialsexualexploitationDao {
	
	private static final Logger logger = LoggerFactory
			.getLogger(CommercialsexualexploitationDaoImpl.class);
	
	@Override
	public void hydrateStaging(ExportDomain domain) throws Exception 
	{
	
		Export export = domain.getExport();
		List<CommercialSexualExploitation> commercialSexualExploitations = export.getCommercialSexualExploitation();
		Long i=new Long(0L);
		Data data =new Data();
		com.servinglynk.hmis.warehouse.model.v2014.Export exportEntity = (com.servinglynk.hmis.warehouse.model.v2014.Export) getModel(com.servinglynk.hmis.warehouse.model.v2014.Export.class,String.valueOf(domain.getExport().getExportID()),getProjectGroupCode(domain));
		if(commercialSexualExploitations!=null && !commercialSexualExploitations.isEmpty())
		{
			for(CommercialSexualExploitation commercialSexualExploitation :  commercialSexualExploitations)
			{
				try {
					// We always insert for a Full refresh and update if the record exists for Delta refresh
					Commercialsexualexploitation commerExploitation = getModelObject(domain,commercialSexualExploitation,data);
					commerExploitation.setAskedorforcedtoexchangeforsex(CommercialsexualexploitationAskedorforcedtoexchangeforsexEnum.lookupEnum(BasicDataGenerator.getStringValue(commercialSexualExploitation.getAskedOrForcedToExchangeForSex())));
					commerExploitation.setCountofexchangeforsex(CommercialsexualexploitationCountofexchangeforsexEnum.lookupEnum(BasicDataGenerator.getStringValue(commercialSexualExploitation.getCountOfExchangeForSex())));
					commerExploitation.setExchangeforsexpastthreemonths(CommercialsexualexploitationExchangeforsexpastthreemonthsEnum.lookupEnum(BasicDataGenerator.getStringValue(commercialSexualExploitation.getExchangeForSexPastThreeMonths())));
					
					commerExploitation.setExport(exportEntity);
					if(exportEntity != null)
						exportEntity.addCommercialsexualexploitation(commerExploitation);
					com.servinglynk.hmis.warehouse.model.v2014.Enrollment enrollmentModel = (com.servinglynk.hmis.warehouse.model.v2014.Enrollment) getModel(com.servinglynk.hmis.warehouse.model.v2014.Enrollment.class,String.valueOf(commercialSexualExploitation.getProjectEntryID()),getProjectGroupCode(domain));
					commerExploitation.setEnrollmentid(enrollmentModel);
					//commerExploitation.setUser(exportEntity.getUser());
					commerExploitation.setDateCreatedFromSource(BasicDataGenerator.getLocalDateTime(commercialSexualExploitation.getDateCreated()));
					commerExploitation.setDateUpdatedFromSource(BasicDataGenerator.getLocalDateTime(commercialSexualExploitation.getDateUpdated()));
					performSaveOrUpdate(commerExploitation);
				} catch(Exception e) {
					logger.error("Exception in:"+commercialSexualExploitation.getProjectEntryID()+  ":: Exception" +e.getLocalizedMessage());
					throw new Exception(e);
				}
				
			}
		}
		hydrateBulkUploadActivityStaging(data.i, data.j, Commercialsexualexploitation.class.getSimpleName(), domain, exportEntity);
	}
	
	  public com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation getModelObject(ExportDomain domain, CommercialSexualExploitation commercialSexualExploitation,Data data) {
		  com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation commerExploitation = null;
		  if(!isFullRefresh(domain))
			  commerExploitation = (com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation) getModel(com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation.class, commercialSexualExploitation.getCommercialSexualExploitationID(), getProjectGroupCode(domain));
		
		  if(commerExploitation == null) {
			commerExploitation = new com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation();
			commerExploitation.setId(UUID.randomUUID());
			commerExploitation.setInserted(true);
			++data.i;
		  }else{
			  ++data.j;
		  }
		  hydrateCommonFields(commerExploitation, domain,commercialSexualExploitation.getCommercialSexualExploitationID(),data.i+data.j);
		  return commerExploitation;
      }

	   public com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation createCommercialSexualExploitation(com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation commercialSexualExploitation){
	       commercialSexualExploitation.setId(UUID.randomUUID()); 
	       insert(commercialSexualExploitation);
	       return commercialSexualExploitation;
	   }
	   public com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation updateCommercialSexualExploitation(com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation commercialSexualExploitation){
	       update(commercialSexualExploitation);
	       return commercialSexualExploitation;
	   }
	   public void deleteCommercialSexualExploitation(com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation commercialSexualExploitation){
	       delete(commercialSexualExploitation);
	   }
	   public com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation getCommercialSexualExploitationById(UUID commercialSexualExploitationId){ 
	       return (com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation) get(com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation.class, commercialSexualExploitationId);
	   }
	   public List<com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation> getAllEnrollmentCommercialSexualExploitations(UUID enrollmentId,Integer startIndex, Integer maxItems){
	       DetachedCriteria criteria=DetachedCriteria.forClass(com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation.class);
	       criteria.createAlias("enrollmentid", "enrollmentid");
	       criteria.add(Restrictions.eq("enrollmentid.id", enrollmentId));
	       return (List<com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation>) findByCriteria(criteria,startIndex,maxItems);
	   }
	   public long getEnrollmentCommercialSexualExploitationsCount(UUID enrollmentId){
	       DetachedCriteria criteria=DetachedCriteria.forClass(com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation.class);
	       criteria.createAlias("enrollmentid", "enrollmentid");
	       criteria.add(Restrictions.eq("enrollmentid.id", enrollmentId));
	       return countRows(criteria);
	   }
}
