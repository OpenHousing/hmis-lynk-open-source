package com.servinglynk.hmis.warehouse.dao;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.apache.hadoop.hbase.thrift2.generated.THBaseService.Iface;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.BeanUtils;
import org.springframework.transaction.annotation.Transactional;

import com.servinglynk.hmis.warehouse.domain.ExportDomain;
import com.servinglynk.hmis.warehouse.domain.Sources.Source.Export;
import com.servinglynk.hmis.warehouse.domain.Sources.Source.Export.CommercialSexualExploitation;
import com.servinglynk.hmis.warehouse.domain.SyncDomain;
import com.servinglynk.hmis.warehouse.enums.CommercialsexualexploitationAskedorforcedtoexchangeforsexEnum;
import com.servinglynk.hmis.warehouse.enums.CommercialsexualexploitationCountofexchangeforsexEnum;
import com.servinglynk.hmis.warehouse.enums.CommercialsexualexploitationExchangeforsexpastthreemonthsEnum;
import com.servinglynk.hmis.warehouse.model.stagv2014.Commercialsexualexploitation;
import com.servinglynk.hmis.warehouse.model.stagv2014.Enrollment;
import com.servinglynk.hmis.warehouse.util.BasicDataGenerator;

public class CommercialsexualexploitationDaoImpl  extends ParentDaoImpl  implements CommercialsexualexploitationDao {
	
	@Override
	public void hydrateStaging(ExportDomain domain) 
	{
		Export export = domain.getExport();
		List<CommercialSexualExploitation> commercialSexualExploitations = export.getCommercialSexualExploitation();
		hydrateBulkUploadActivityStaging(commercialSexualExploitations, com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation.class.getSimpleName(), domain);
		if(commercialSexualExploitations!=null && !commercialSexualExploitations.isEmpty())
		{
			int i=0;
			for(CommercialSexualExploitation commercialSexualExploitation:  commercialSexualExploitations)
			{
				Commercialsexualexploitation commerExploitation = new Commercialsexualexploitation();
				commerExploitation.setAskedorforcedtoexchangeforsex(CommercialsexualexploitationAskedorforcedtoexchangeforsexEnum.lookupEnum(BasicDataGenerator.getStringValue(commercialSexualExploitation.getAskedOrForcedToExchangeForSex())));
				commerExploitation.setCountofexchangeforsex(CommercialsexualexploitationCountofexchangeforsexEnum.lookupEnum(BasicDataGenerator.getStringValue(commercialSexualExploitation.getCountOfExchangeForSex())));
				commerExploitation.setExchangeforsexpastthreemonths(CommercialsexualexploitationExchangeforsexpastthreemonthsEnum.lookupEnum(BasicDataGenerator.getStringValue(commercialSexualExploitation.getExchangeForSexPastThreeMonths())));
				commerExploitation.setId(UUID.randomUUID());
				commerExploitation.setDateCreated(LocalDateTime.now());
				commerExploitation.setDateUpdated(LocalDateTime.now());
				Map<String, UUID> enrollmentProjectEntryIDMap = domain.getEnrollmentProjectEntryIDMap();
				UUID exportId = domain.getExportId();
				com.servinglynk.hmis.warehouse.model.stagv2014.Export exportEntity = (com.servinglynk.hmis.warehouse.model.stagv2014.Export) get(com.servinglynk.hmis.warehouse.model.stagv2014.Export.class, exportId);
				commerExploitation.setExport(exportEntity);
				Enrollment enrollmentModel = (Enrollment) get(Enrollment.class, enrollmentProjectEntryIDMap.get(commercialSexualExploitation.getProjectEntryID()));
				commerExploitation.setEnrollmentid(enrollmentModel);
				exportEntity.addCommercialsexualexploitation(commerExploitation);
				commerExploitation.setUser(exportEntity.getUser());
				commerExploitation.setDateCreatedFromSource(BasicDataGenerator.getLocalDateTime(commercialSexualExploitation.getDateCreated()));
				commerExploitation.setDateUpdatedFromSource(BasicDataGenerator.getLocalDateTime(commercialSexualExploitation.getDateUpdated()));

				hydrateCommonFields(commerExploitation, domain,commercialSexualExploitation.getCommercialSexualExploitationID());
				insert(commerExploitation);
				i++;
				  if(i % batchSize() == 0 && i > 0) {
	                    getCurrentSession().flush();
	                    getCurrentSession().clear();
	                }
			}
		}
	}

	@Override
	public void hydrateLive(
			com.servinglynk.hmis.warehouse.model.stagv2014.Export export, Long id) {
		Set<Commercialsexualexploitation> commercialsexualexploitations = export.getCommercialsexualexploitations();
		hydrateBulkUploadActivity(commercialsexualexploitations, com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation.class.getSimpleName(), export,id);
		if(commercialsexualexploitations != null && !commercialsexualexploitations.isEmpty()) {
			for(Commercialsexualexploitation commercialsexualexploitation : commercialsexualexploitations) {
				com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation target = new com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation();
				BeanUtils.copyProperties(commercialsexualexploitation, target,getNonCollectionFields(target));
				com.servinglynk.hmis.warehouse.model.v2014.Export exportEntity = (com.servinglynk.hmis.warehouse.model.v2014.Export) get(com.servinglynk.hmis.warehouse.model.v2014.Export.class, export.getId());
				target.setExport(exportEntity);
				com.servinglynk.hmis.warehouse.model.v2014.Enrollment enrollmentModel = (com.servinglynk.hmis.warehouse.model.v2014.Enrollment) get(com.servinglynk.hmis.warehouse.model.v2014.Enrollment.class,export.getId());
				target.setEnrollmentid(enrollmentModel);
			//	target.setUser(exportEntity.getUser());
				exportEntity.addCommercialsexualexploitation(target);
				 target.setDateCreated(LocalDateTime.now());
				 target.setDateUpdated(LocalDateTime.now());
				insert(target);
			}
		}
	}

	@Override
	public void hydrateHBASE(SyncDomain syncDomain) {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void performSave(Iface client, Object entity) {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected List performGet(Iface client, Object entity) {
		// TODO Auto-generated method stub
		return null;
	}

	
	   public com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation createCommercialSexualExploitation(com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation commercialSexualExploitation){
	       commercialSexualExploitation.setId(UUID.randomUUID()); 
	       insert(commercialSexualExploitation);
	       return commercialSexualExploitation;
	   }
	   public com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation updateCommercialSexualExploitation(com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation commercialSexualExploitation){
	       update(commercialSexualExploitation);
	       return commercialSexualExploitation;
	   }
	   public void deleteCommercialSexualExploitation(com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation commercialSexualExploitation){
	       delete(commercialSexualExploitation);
	   }
	   public com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation getCommercialSexualExploitationById(UUID commercialSexualExploitationId){ 
	       return (com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation) get(com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation.class, commercialSexualExploitationId);
	   }
	   public List<com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation> getAllEnrollmentCommercialSexualExploitations(UUID enrollmentId,Integer startIndex, Integer maxItems){
	       DetachedCriteria criteria=DetachedCriteria.forClass(com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation.class);
	       criteria.createAlias("enrollmentid", "enrollmentid");
	       criteria.add(Restrictions.eq("enrollmentid.id", enrollmentId));
	       return (List<com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation>) findByCriteria(criteria,startIndex,maxItems);
	   }
	   public long getEnrollmentCommercialSexualExploitationsCount(UUID enrollmentId){
	       DetachedCriteria criteria=DetachedCriteria.forClass(com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation.class);
	       criteria.createAlias("enrollmentid", "enrollmentid");
	       criteria.add(Restrictions.eq("enrollmentid.id", enrollmentId));
	       return countRows(criteria);
	   }
}
